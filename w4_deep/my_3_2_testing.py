# *****************************
#         ТЕСТИРОВАНИЕ
# юнит-тестирование = модульное тестирование
#
# запуск тестов
# python -m unittest my_3_2_testing.py
# или просто через run в IDE
#
# https://docs.python.org/3/library/unittest.html
# *****************************
import unittest


class TestPython(unittest.TestCase):
    """ Создаём класс-тест для основного функциорала языка, который наследуем от стандартного класа TestCase
       обычно так не делают, потому что подразумевается, что функционал языка и сторонних модулей протестирован
       но это учебный пример.

       Обычно пишут тесты для того функционала, который разрабатывают.
       Название класса должно отражать название того, что тестим. """
    def test_float_to_int_coertion(self):
        """ проверяем, действительно ли 1 и то, что вернёт int(1.0) - одно и то же """
        self.assertEqual(1, int(1.0))

    def test_get_empty_dict(self):
        """ проверяем, действительно ли {}.get('key') вернёт None """
        self.assertIsNone({}.get('key'))

    def test_truenes(self):
        """ проверяем, действительно ли bool(10) вернёт True """
        self.assertTrue(bool(10))

    def test_integer_division(self):
        """ проверяем, действительно ли 10/5 эквивалентно 2 - нет! получится 2.0 - строка в комменте верная """
        self.assertIs(10 / 5, 2)
        # self.assertIs(10 / 5, 2.0)
